
import Generacion_siguientes_tablas_automatas.Tabla_siguientes;
import Generacion_siguientes_tablas_automatas.Tabla_transiciones;
import Generacion_siguientes_tablas_automatas.Transicion;
import Reestructurado_expresiones.Expresion_Lexema;
import Reestructurado_expresiones.Grafica_arboles;
import java.awt.Component;
import java.awt.Graphics;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import jdk.nashorn.internal.scripts.JO;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author marco
 */
public class Ventana_Principal extends javax.swing.JFrame {

    String rutaGlobal = "";
    Reporte_html generar = new Reporte_html();
    int opcion = -1;

    /**
     * Creates new form Ventana_Principal
     */
    public Ventana_Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.MatteBorder(null), "Archivo a Analizar"));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.MatteBorder(null), "Graficas Generadas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 14), new java.awt.Color(0, 0, 0))); // NOI18N

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/arboll.png"))); // NOI18N
        jButton1.setToolTipText("Arboles");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/siguientes.png"))); // NOI18N
        jButton2.setToolTipText("Tabla de siguientes");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/automata.png"))); // NOI18N
        jButton3.setToolTipText("Automatas");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/next.png"))); // NOI18N
        jButton4.setToolTipText("Siguiente");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/previous.png"))); // NOI18N
        jButton5.setToolTipText("Anterior");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Expresion3.jpg"))); // NOI18N
        jScrollPane1.setViewportView(jLabel1);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/transiciones.png"))); // NOI18N
        jButton6.setToolTipText("Tabla de transiciones");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addComponent(jButton5))
                        .addGap(28, 28, 28))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(6, 6, 6)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addContainerGap(41, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Consola de salida"));

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setSelectionColor(new java.awt.Color(153, 153, 153));
        jScrollPane3.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("Archivo");

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/abrir_archivo.png"))); // NOI18N
        jMenuItem1.setText("Abrir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/guardar_archivo.png"))); // NOI18N
        jMenuItem2.setText("Guardar");
        jMenu1.add(jMenuItem2);

        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/guardar_como.png"))); // NOI18N
        jMenuItem3.setText("Guardar Como");
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Reportes");

        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/reportehtml.png"))); // NOI18N
        jMenuItem4.setText("Tokens");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/reportehtml.png"))); // NOI18N
        jMenuItem5.setText("Errores Lexicos");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);
        jMenu2.add(jSeparator1);

        jMenuItem6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/reportehtml.png"))); // NOI18N
        jMenuItem6.setText("Lexemas");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/reportehtml.png"))); // NOI18N
        jMenuItem7.setText("Macros");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/reportehtml.png"))); // NOI18N
        jMenuItem8.setText("Expresiones Regulares");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Analizar Archivo");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jMenu3MouseEntered(evt);
            }
        });
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        String datosarchivo = AbrirArchivoGlobal();

        jTextArea1.setText(datosarchivo);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        if (!arboles.isEmpty()) {
            jLabel1.setIcon(new ImageIcon(siguientes.getFirst()));
            opcion = 2;
            interacion = 1;
        } else {
            JOptionPane.showMessageDialog(null, "Lista vacia");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_jMenu3ActionPerformed

    LinkedList<String> arboles;
    LinkedList<String> siguientes;
    LinkedList<String> transiciones;
    LinkedList<String> automatas;


    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        // TODO add your handling code here:
        Analizador_Lexico analizador = new Analizador_Lexico(jTextArea1.getText());
        //limpiamos las estructuras para evitar la redundancia cada vez que se pulsa el Boton de analizis
        analizador.ListaParser.clear();
        analizador.ListaErroresLexicos.clear();

        //realiza el analisis de lo que contenga el area de texto
        analizador.scanner();

        //generamos reportes tras el analisis lexico
        generar.escribir_fichero_tokens(analizador.returnListaTokens());
        generar.escribir_fichero_erroresTokens(analizador.returnListaErroresLexicos());

        //nos resume si el analisis lexico fue exitoso o no
        if (analizador.AnalisisCorrecto == true) {
            System.out.println("Analisis lexico correcto");
        } else {
            System.err.println("Analisis lexico incorrecto");
        }

        Analizador_Sintactico sintaxis = new Analizador_Sintactico(analizador.returnListaTokens());

        //se limpia todo antes del analisis
        sintaxis.ExpresionesRegulares.clear();
        sintaxis.Lexemas.clear();
        sintaxis.Macros.clear();

        //si el parser es correcto verifica los datos
        if (sintaxis.parser()) {

            JOptionPane.showMessageDialog(null, "Analisis Lexico y Sintactico correctos");
            generar.escribir_fichero_macros(sintaxis.Macros);
            generar.escribir_fichero_lexemas(sintaxis.Lexemas);
            generar.escribir_fichero_expresiones(sintaxis.ExpresionesRegulares);

            Grafica_arboles proc_expresiones = new Grafica_arboles(sintaxis.ExpresionesRegulares);
            //reestructura las expresiones caracter por caracter
            proc_expresiones.procesar_expresiones();
            //una vez estructurado la expresion regular se procede armar el arbol
            proc_expresiones.recorrer_para_graficar_arbol();

            arboles = proc_expresiones.rutas_arboles;
            siguientes = proc_expresiones.rutas_siguientes;
            transiciones = proc_expresiones.rutas_transiciones;
            automatas = proc_expresiones.rutas_automatas;

            LinkedList<Generacion_siguientes_tablas_automatas.Tabla_transiciones> t_transiciones = proc_expresiones.Tabla_transiciones;
                LinkedList<Generacion_siguientes_tablas_automatas.Tabla_siguientes> t_siguientes= proc_expresiones.Tabla_siguientes;

            //iniciamos el analisis de cada lexema
            System.out.println("\n\n");
            //string que contatenara la informacion a mostrar en el log
            String log = "";
            String idL;
            char[] lexema;
            int iterador;
            LinkedList<Generacion_siguientes_tablas_automatas.Transicion> evaluador = null;
            LinkedList<Generacion_siguientes_tablas_automatas.Siguientes> auxevaluador = null;
            Expresion_Lexema MACRO = null;
            boolean idExpresionEncontrado = false;
            boolean confimarmacroCorrecta = true;
            boolean lacadenacumple = true;

            for (Expresion_Lexema cadena : sintaxis.Lexemas) {//inicio analisis de lexemas
                System.out.println("\n cadena nueva\n");
                
                //ide del lexema
                lacadenacumple = true;
                idL = cadena.getIdentiicador();
                //cadena a analizar
                String quitarComillas = cadena.getContenido().replace("\"", "");
                System.out.println(quitarComillas);
                lexema = quitarComillas.toCharArray();
                iterador = 0;
                /**
                 * **********************************************************************************
                 */

                //AHORA VAMOS A BUSCAR EL IDE DE LA EXPREISON REGULAR
                idExpresionEncontrado = false;
                for (Tabla_transiciones transicion_lexema : t_transiciones) {

                    if (transicion_lexema.id.equals(idL)) {
                        //OBTENGO LA TABLA DE TRANSICIONES A EVALUAR
                        idExpresionEncontrado = true;
                        evaluador = transicion_lexema.Tabla_transicion;
                    }

                }
                
                for(Tabla_siguientes data: t_siguientes){
                    
                      if (data.id.equals(idL)) {
                        //OBTENGO LA TABLA DE TRANSICIONES A EVALUAR
                        idExpresionEncontrado = true;
                        auxevaluador = data.t_siguientes;
                    }
                }
                /**
                 * **********************************************************************************
                 */
                //AHORA VAMOS A CERIFICAR QUE EXISTAN LAS MACROS DENTRO DEL SISTEMA

                confimarmacroCorrecta = true;
                if (idExpresionEncontrado) {

                    //vamos a recorrer la tabla de transiciones
                    for (Transicion trans : evaluador) {
                        //aqui solamente recorro los estados
                        for (String sig : trans.estados_siguientes) {
                            //aqui los estados siguientes de los esatdos actuales
                            String[] simbolos = sig.split("°");
                            boolean macrosCorrectas = false;
                            if (!simbolos[1].contains("´")) {
                                //recorremos las macros por cada simbolo
                                for (Expresion_Lexema sim : sintaxis.Macros) {
                                    if (simbolos[1].equals(sim.getIdentiicador())) {
                                        macrosCorrectas = true;
                                    }
                                }

                                if (macrosCorrectas) {
                                    //seguimos interando
                                } else {
                                    confimarmacroCorrecta = false;
                                }

                            }//solo busca los simbolos que no tengan ´´
                        }
                    }

                }//finaliza comprobacion de macros
                /**
                 * **********************************************************************************
                 */
                //AHORA SE PROCEDE A ANALIZAR LA CADENA
                if (idExpresionEncontrado && confimarmacroCorrecta) {
                    boolean todobien = true;

                    //vamos a recorrer la tabla de transiciones
                    for (Transicion trans : evaluador) {

                        if (todobien) {

                            //aqui solamente recorro los estados
                            String estadoActual = trans.estado;
                            boolean seguirEnElmismoestado = true;
                            while (seguirEnElmismoestado) {
                                boolean yaSeReconocioCaracter = false;

                                for (String sig : trans.estados_siguientes) {
                                    if (!yaSeReconocioCaracter) {
                                        //aqui los estados siguientes de los esatdos actuales
                                        String[] datosTransicion = sig.split("°");
                                        String estadoSiguiente = datosTransicion[0];
                                        String simbolo = datosTransicion[1];

                                        //vamos a validad que no se pase de lo adecuado
                                        if (iterador < lexema.length) {
                                            if (simbolo.contains("´") && simbolo.contains(String.valueOf(lexema[iterador]))) {// caracter en especifico

                                               // if (lexema[iterador] == simbolo.replace("´", "").toCharArray()[0]) {
                                                    System.out.println("Caracter aceptado: " + lexema[iterador]);
                                                    yaSeReconocioCaracter = true;
                                                    iterador++;
                                                    if (!trans.conjunto.contains(auxevaluador.getLast().numHoja)){
                                                        seguirEnElmismoestado = false;
                                                    //}
                                              //  }

                                            } else {//MACRO

                                                //vammos a buscar en las macros
                                                String datosMacro = "";
                                                for (Expresion_Lexema macroo : sintaxis.Macros) {
                                                    //como ya se valido ya solo obtengo la macro
                                                    if (simbolo.equals(macroo.getIdentiicador())) {
                                                        datosMacro = macroo.getContenido();
                                                    }
                                                }

                                                if (datosMacro.contains("~")) {
                                                    String[] rango = datosMacro.split("~");
                                                    if (lexema[iterador] >= Integer.valueOf(rango[0]) && lexema[iterador] >= Integer.valueOf(rango[0])) {
                                                        System.out.println("Caracter aceptado: " + lexema[iterador]);
                                                        yaSeReconocioCaracter = true;
                                                        iterador++;
                                                         if (!trans.conjunto.contains(auxevaluador.getLast().numHoja)){
                                                        seguirEnElmismoestado = false;
                                                    }
                                                    }

                                                } else if (datosMacro.contains(",")) {
                                                    String elemento = String.valueOf(Integer.valueOf(lexema[iterador]));

                                                    if (elemento.contains(datosMacro)) {
                                                        System.out.println("Caracter aceptado: " + lexema[iterador]);
                                                        yaSeReconocioCaracter = true;
                                                        iterador++;
                                                         if (!trans.conjunto.contains(auxevaluador.getLast().numHoja)){
                                                        seguirEnElmismoestado = false;
                                                    }
                                                    }

                                                }

                                            }
                                        }

                                    }
                                }
                              
                                if (!yaSeReconocioCaracter) {
                                   seguirEnElmismoestado = false;
                                    todobien = false;
                                    lacadenacumple = false;
                                }
                            }//se mantiene de ser verdadero

                            //salta al otro estado         
                        }

                    }

                } else {
                    log += "\n Expresion no valida " + quitarComillas + " con id -> " + idL + "\n";
                }

                if (iterador>3) {
                    log += "\n El lexema " + quitarComillas + " si cumple con la expresion ->" + idL;
                }else{
                   log += "\n La cadena " + quitarComillas + " no coincide con el patron de ->" + idL + "\n";
                                   
                }

            }//finalizza analisis de lexemas

            jTextArea2.setText(log);

        } else {
            JOptionPane.showMessageDialog(null, "Analisis Sintactico fatal, error de sintaxis");
        }

    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        //abre la ruta relativa del archivo html de tokens
        generar.mostrar_reporte_tokens();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        //abre la ruta relativa del archivo html de errores lexicos
        generar.mostrar_reporte_errores_lexicos();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        generar.mostrar_reporte_lexemas();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        generar.mostrar_reporte_macros();

    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        generar.mostrar_reporte_expresiones();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:

        if (!transiciones.isEmpty()) {
            jLabel1.setIcon(new ImageIcon(transiciones.getFirst()));
            opcion = 1;
            interacion = 1;
        } else {
            JOptionPane.showMessageDialog(null, "Lista vacia");
        }


    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        if (!arboles.isEmpty()) {
            jLabel1.setIcon(new ImageIcon(arboles.getFirst()));
            opcion = 4;
            interacion = 1;
        } else {
            JOptionPane.showMessageDialog(null, "Lista vacia");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        if (!automatas.isEmpty()) {
            jLabel1.setIcon(new ImageIcon(automatas.getFirst()));
            opcion = 3;
            interacion = 1;
        } else {
            JOptionPane.showMessageDialog(null, "Lista vacia");
        }
    }//GEN-LAST:event_jButton3ActionPerformed
    int interacion = 1;
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        if (opcion == 1) {

            if (interacion < transiciones.size()) {
                jLabel1.setIcon(new ImageIcon(transiciones.get(interacion)));
                interacion++;
            } else {
                interacion = 0;
                jLabel1.setIcon(new ImageIcon(transiciones.get(interacion)));

            }

        } else if (opcion == 2) {

            if (interacion < siguientes.size()) {
                jLabel1.setIcon(new ImageIcon(siguientes.get(interacion)));
                interacion++;
            } else {
                interacion = 0;
                jLabel1.setIcon(new ImageIcon(siguientes.get(interacion)));
            }
        } else if (opcion == 3) {
            if (interacion < automatas.size()) {
                jLabel1.setIcon(new ImageIcon(automatas.get(interacion)));
                interacion++;
            } else {
                interacion = 0;
                jLabel1.setIcon(new ImageIcon(automatas.get(interacion)));

            }
        } else if (opcion == 4) {

            if (interacion < arboles.size()) {
                jLabel1.setIcon(new ImageIcon(arboles.get(interacion)));
                interacion++;
            } else {
                interacion = 0;
                jLabel1.setIcon(new ImageIcon(arboles.get(interacion)));
            }

        } else {
            JOptionPane.showMessageDialog(null, "No se ha detectado una opcion de imagenes\n PULSE automatas, siguientes, arboles u automatas");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:

        if (opcion == 1) {

            if (0 < interacion) {

                jLabel1.setIcon(new ImageIcon(transiciones.get(interacion)));
                interacion--;

            } else {
                interacion = 0;
                jLabel1.setIcon(new ImageIcon(transiciones.get(interacion)));

            }

        } else if (opcion == 2) {

            if (0 < interacion) {

                jLabel1.setIcon(new ImageIcon(siguientes.get(interacion)));
                interacion--;
            } else {
                interacion = 0;
                jLabel1.setIcon(new ImageIcon(siguientes.get(interacion)));
            }
        } else if (opcion == 3) {
            if (0 < interacion) {

                jLabel1.setIcon(new ImageIcon(automatas.get(interacion)));
                interacion--;
            } else {
                interacion = 0;
                jLabel1.setIcon(new ImageIcon(automatas.get(interacion)));

            }
        } else if (opcion == 4) {

            if (0 < interacion) {

                jLabel1.setIcon(new ImageIcon(arboles.get(interacion)));
                interacion--;
            } else {
                interacion = 0;
                jLabel1.setIcon(new ImageIcon(arboles.get(interacion)));
            }

        } else {
            JOptionPane.showMessageDialog(null, "No se ha detectado una opcion de imagenes\n PULSE automatas, siguientes, arboles u automatas");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenu3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu3MouseEntered

    /*METODOS VARIOS*/
 /*abre el archivo desde el JfileChooser y obtiene tanto los datos como la ruta del archivo*/
    public String AbrirArchivoGlobal() {

        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);

        try {

            File datos = new File(chooser.getSelectedFile().getAbsolutePath());
            rutaGlobal = datos.getAbsolutePath();
            System.err.println("\n\n" + rutaGlobal + "  \n\n");
            System.out.println(datos);
            BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(datos), "UTF-8"));

            /*Proceso de recorrido del archivo*/
            String datosarchivo = "";
            while (in.ready()) {
                datosarchivo += in.readLine() + "\n";

            }
            System.out.println(datosarchivo);

            return datosarchivo;
        } catch (IOException e) {
            System.out.println("error aqui");
            return "";
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana_Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
